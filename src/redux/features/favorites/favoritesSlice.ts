/* eslint-disable */
import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { fetchCount } from './favoriteAPI';

export interface FavoritesState {
  value: Array<number>;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: FavoritesState = {
  value: [],
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk('favorites/fetchCount', async (amount: number) => {
  const response = await fetchCount(amount);
  // The value we return becomes the `fulfilled` action payload
  return response.data;
});

export const favoritesSlice = createSlice({
  name: 'favorites',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount2: (state, action: PayloadAction<number>) => {
      state.value = [...state.value, action.payload];
      console.log(state.value);
    },
    decrementByAmount2: (state, action: PayloadAction<number>) => {
      state.value = state.value?.filter(value => value != action.payload);
      console.log(state.value);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: builder => {
    builder
      .addCase(incrementAsync.pending, state => {
        state.status = 'loading';
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value = [...state.value, action.payload];
      })
      .addCase(incrementAsync.rejected, state => {
        state.status = 'failed';
      });
  },
});

export const { incrementByAmount2, decrementByAmount2 } = favoritesSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount2 = (state: RootState) => state.favorites.value;

export default favoritesSlice.reducer;
